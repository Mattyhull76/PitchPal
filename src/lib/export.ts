import jsPDF from 'jspdf';
import { PitchDeck, PitchSlide } from '@/types/pitch';

export const exportToPDF = async (pitchDeck: PitchDeck): Promise<void> => {
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  const margin = 20;
  const contentWidth = pageWidth - 2 * margin;

  // Title page
  pdf.setFontSize(24);
  pdf.setFont('helvetica', 'bold');
  pdf.text(pitchDeck.title, pageWidth / 2, 40, { align: 'center' });
  
  pdf.setFontSize(12);
  pdf.setFont('helvetica', 'normal');
  pdf.text(`Generated by PitchPal`, pageWidth / 2, 60, { align: 'center' });
  pdf.text(`${new Date().toLocaleDateString()}`, pageWidth / 2, 70, { align: 'center' });

  // Add slides
  pitchDeck.slides.forEach((slide, index) => {
    if (index > 0) {
      pdf.addPage();
    } else {
      // Add some space after title on first page
      pdf.setFontSize(16);
      pdf.setFont('helvetica', 'bold');
      pdf.text(`Slide ${index + 1}: ${slide.title}`, margin, 100);
      
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      const lines = pdf.splitTextToSize(slide.content, contentWidth);
      pdf.text(lines, margin, 120);
      return;
    }

    // Slide title
    pdf.setFontSize(16);
    pdf.setFont('helvetica', 'bold');
    pdf.text(`Slide ${index + 1}: ${slide.title}`, margin, 30);

    // Slide content
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');
    const lines = pdf.splitTextToSize(slide.content, contentWidth);
    pdf.text(lines, margin, 50);

    // Add slide notes if available
    if (slide.notes) {
      const notesY = Math.min(50 + lines.length * 6 + 20, pageHeight - 40);
      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'italic');
      pdf.text('Speaker Notes:', margin, notesY);
      
      const notesLines = pdf.splitTextToSize(slide.notes, contentWidth);
      pdf.text(notesLines, margin, notesY + 10);
    }
  });

  // Save the PDF
  pdf.save(`${pitchDeck.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.pdf`);
};

export const exportExecutiveSummaryToPDF = async (
  content: string, 
  startupName: string
): Promise<void> => {
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.getWidth();
  const margin = 20;
  const contentWidth = pageWidth - 2 * margin;

  // Title
  pdf.setFontSize(20);
  pdf.setFont('helvetica', 'bold');
  pdf.text(`${startupName} - Executive Summary`, pageWidth / 2, 30, { align: 'center' });

  // Generated by line
  pdf.setFontSize(10);
  pdf.setFont('helvetica', 'normal');
  pdf.text(`Generated by PitchPal on ${new Date().toLocaleDateString()}`, pageWidth / 2, 45, { align: 'center' });

  // Content
  pdf.setFontSize(12);
  pdf.setFont('helvetica', 'normal');
  const lines = pdf.splitTextToSize(content, contentWidth);
  
  let yPosition = 60;
  const lineHeight = 6;
  const pageHeight = pdf.internal.pageSize.getHeight();

  lines.forEach((line: string) => {
    if (yPosition > pageHeight - margin) {
      pdf.addPage();
      yPosition = margin;
    }
    pdf.text(line, margin, yPosition);
    yPosition += lineHeight;
  });

  // Save the PDF
  pdf.save(`${startupName.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_executive_summary.pdf`);
};

export const copyToClipboard = async (text: string): Promise<boolean> => {
  try {
    await navigator.clipboard.writeText(text);
    return true;
  } catch (error) {
    console.error('Failed to copy to clipboard:', error);
    return false;
  }
};

export const generateShareableLink = (pitchId: string): string => {
  const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';
  return `${baseUrl}/pitch/share/${pitchId}`;
};

// Future: PPTX export functionality
export const exportToPPTX = async (pitchDeck: PitchDeck): Promise<void> => {
  // This would require a library like pptxgenjs
  // For now, we'll show a placeholder
  alert('PPTX export coming soon! For now, please use PDF export.');
};

// Future: DOCX export for executive summary
export const exportExecutiveSummaryToDOCX = async (
  content: string, 
  startupName: string
): Promise<void> => {
  // This would require a library like docx
  // For now, we'll show a placeholder
  alert('DOCX export coming soon! For now, please use PDF export.');
};
